[
  
  {
    "title": "AI Agents - Setup",
    "url": "/pages/dev/lumos/posts/ai-agent-setup/",
    "categories": "Now Assist",
    "tags": "Now Assist, AI Agent",
    "date": "2025-01-13 00:00:00 +0530",
    





    
    "snippet": "https://servicenow-my.sharepoint.com/personal/roberto_roblesorozco_servicenow_com1/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Froberto%5Froblesorozco%5Fservicenow%5Fcom1%2FDocuments%2FQuick%20setup%...",
    "content": "https://servicenow-my.sharepoint.com/personal/roberto_roblesorozco_servicenow_com1/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Froberto%5Froblesorozco%5Fservicenow%5Fcom1%2FDocuments%2FQuick%20setup%20guide%20for%20AIA%20Workshop%281%29%2Epdf&amp;parent=%2Fpersonal%2Froberto%5Froblesorozco%5Fservicenow%5Fcom1%2FDocuments&amp;ga=1min release version - xp3ITSM Credskey: 29db3342130b4982b23da1833b99d626endpoint: https://itsm-openai-us-south-central.openai.azure.com"
  },
  
  {
    "title": "AI Agents - Plugins",
    "url": "/pages/dev/lumos/posts/ai-agent-plugins/",
    "categories": "Now Assist",
    "tags": "Now Assist, AI Agent",
    "date": "2025-01-13 00:00:00 +0530",
    





    
    "snippet": "https://servicenow-my.sharepoint.com/personal/roberto_roblesorozco_servicenow_com1/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Froberto%5Froblesorozco%5Fservicenow%5Fcom1%2FDocuments%2FQuick%20setup%...",
    "content": "https://servicenow-my.sharepoint.com/personal/roberto_roblesorozco_servicenow_com1/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Froberto%5Froblesorozco%5Fservicenow%5Fcom1%2FDocuments%2FQuick%20setup%20guide%20for%20AIA%20Workshop%281%29%2Epdf&amp;parent=%2Fpersonal%2Froberto%5Froblesorozco%5Fservicenow%5Fcom1%2FDocuments&amp;ga=1"
  },
  
  {
    "title": "AI Agents - LAB",
    "url": "/pages/dev/lumos/posts/ai-agent-lab/",
    "categories": "Now Assist",
    "tags": "Now Assist, AI Agent",
    "date": "2025-01-13 00:00:00 +0530",
    





    
    "snippet": "https://servicenow.sharepoint.com/:w:/r/sites/itsmgenerativeai/_layouts/15/Doc.aspx?sourcedoc=%7B074FB93C-2E72-4B85-A23D-8D09E0087EFC%7D&amp;file=Lab_guide.docx&amp;action=default&amp;mobileredirec...",
    "content": "https://servicenow.sharepoint.com/:w:/r/sites/itsmgenerativeai/_layouts/15/Doc.aspx?sourcedoc=%7B074FB93C-2E72-4B85-A23D-8D09E0087EFC%7D&amp;file=Lab_guide.docx&amp;action=default&amp;mobileredirect=true&amp;DefaultItemOpen=1"
  },
  
  {
    "title": "AI Agents - FAQ",
    "url": "/pages/dev/lumos/posts/ai-agent-faq/",
    "categories": "Now Assist",
    "tags": "Now Assist, AI Agent",
    "date": "2025-01-13 00:00:00 +0530",
    





    
    "snippet": "https://servicenow-my.sharepoint.com/personal/roberto_roblesorozco_servicenow_com1/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Froberto%5Froblesorozco%5Fservicenow%5Fcom1%2FDocuments%2FQuick%20setup%...",
    "content": "https://servicenow-my.sharepoint.com/personal/roberto_roblesorozco_servicenow_com1/_layouts/15/onedrive.aspx?id=%2Fpersonal%2Froberto%5Froblesorozco%5Fservicenow%5Fcom1%2FDocuments%2FQuick%20setup%20guide%20for%20AIA%20Workshop%281%29%2Epdf&amp;parent=%2Fpersonal%2Froberto%5Froblesorozco%5Fservicenow%5Fcom1%2FDocuments&amp;ga=1sys_generative_ai_log for ai logssn_aia_agent_config - for proficencysn_aia_execution_plan - Provides details of the execution plan of your promptsn_aia_strategy - Strategy available for AI Agentssn_aia_trigger_configuration_list - provides a specific table trigger objective for the promt + AI Agent"
  },
  
  {
    "title": "Flow Designer - Wait for Message",
    "url": "/pages/dev/lumos/posts/wait-for-message-fd/",
    "categories": "Blog",
    "tags": "Blog, Flow Designer, Wait for Message, FD",
    "date": "2025-01-01 00:00:00 +0530",
    





    
    "snippet": "OverviewA way for user to stop flow execution at a predetermined action / step and resume by sending a message. This functionality is similar to Wait for WF Event functionality available in the wor...",
    "content": "OverviewA way for user to stop flow execution at a predetermined action / step and resume by sending a message. This functionality is similar to Wait for WF Event functionality available in the workflow.While designing the flow, user can add the Wait For Message action, user must provide a message for which the flow needs to wait.During execution, when the flow engine reaches to the Wait For Message action, it will go into quiesce state.The user can then send the message by using sendMessage(). The cursor will resume execution if it gets the expected message, otherwise it will continue waiting.Prerequisite (How will users get context_id for sending messages?)In workflow, we have a method getRunningFlows(glideRecord) which gives the running workflow contexts for a particular record. A user can then use broadcastEvent() using this context id.We should consider providing below 2 APIs that will serve as a starting point -  We should consider creating sn_fd.FlowAPI.getRunningFlows(source_glide_record, flow_internal_name), this should return the glide record of sys_flow_context for the source_glide_record and matching flow_internal_name. If no such records are found, it will simply return an empty glide record.  We should also consider creating sn_fd.FlowAPI.getRunningSubflows(flow_context_sys_id, subflow_internal_name) (or something similar) which would return context id of the subflows, so that user can use this (Wait For Message) functionality.Considerations  Can there be a race condition (Flow is trying to execute Wait For Message instruction and message arrives at the same time)?          Ideally No, if the flow is running and user sends a message, the message won’t be able to get mutex and simply wait for retry (existing behaviour). Flow needs to be in quiesced state for the message to work. If the flow is not waiting for a message (waiting for some other condition or duration or different message) then also there’s no race condition, the message will simply be ignored because there’s nothing to do with it.        What is the data type of “message”?          For now, “message” is considered as a string (this is similar to workflow). Sending a payload is considered a future enhancement, please refer      Design (How users will use in flow?)  provide a new OOB step and action for “Wait For Message”  we will take message input from the user.APIs for users (How users will send message from script?)provide users with below new method (and its variants as required)  sn_fd.FlowAPI.sendMessage(context_id, message)          checks if the cursor is waiting for the message. If yes, proceed ahead, if no, then discard.        If there’s do in parallel in the flow such that they have wait for message then there will be multiple cursors. In this case, all the cursors will get the message (like broadcast) and cursors waiting for that particular message will resume the flow. (Can there be a use case where user has parallel wait for message expecting same message? I don’t know, but it is being handled like broadcast functionality).Compilation (Flow Engine)  New Instruction and its compiler and executorExecution (Flow Engine)      When the cursor reaches wait for message instruction, it will go into quiesce state.Full screen width and center alignment        IFF the message sent by user matches, then start executionFull screen width and center alignment        also see, here  Current Limitations (Exist in workflow but not being considered here)  no alternatives for registerForEvent(), unRegisterForEvent() &amp; broadcastEvent() offered by workflow ."
  },
  
  {
    "title": "Software Design Patterns",
    "url": "/pages/dev/lumos/posts/software-design-pattern/",
    "categories": "Blog",
    "tags": "Blog, Software Design, Design Patterns",
    "date": "2025-01-01 00:00:00 +0530",
    





    
    "snippet": "IntroductionSoftware design patterns are a crucial aspect of software engineering, providing tested, proven development paradigms that can be reused across different projects. These patterns encaps...",
    "content": "IntroductionSoftware design patterns are a crucial aspect of software engineering, providing tested, proven development paradigms that can be reused across different projects. These patterns encapsulate best practices and solutions to common problems, making software development more efficient, maintainable, and scalable. Let’s delve into some key software design patterns.What are Design Patterns?Design patterns are general reusable solutions to common problems that occur in software design. They are not finished designs that can be directly transformed into code, but rather templates or blueprints that can be adapted to solve specific problems.Types of Software Design PatternsDesign patterns are typically categorized into three main types:  Creational Patterns: These patterns deal with object creation mechanisms, optimizing the way objects are created and ensuring the system remains flexible. Key examples include:          Singleton: Ensures a class has only one instance and provides a global point of access to it.      Factory Method: Defines an interface for creating an object but allows subclasses to alter the type of objects that will be created.      Abstract Factory: Provides an interface for creating families of related or dependent objects without specifying their concrete classes.        Structural Patterns: These patterns focus on class and object composition, forming larger structures from smaller structures while ensuring that these structures can be changed dynamically. Key examples include:          Adapter: Allows incompatible interfaces to work together by converting the interface of a class into another interface that clients expect.      Decorator: Adds behavior or responsibilities to individual objects, without affecting other objects.      Composite: Composes objects into tree structures to represent part-whole hierarchies, allowing clients to treat individual objects and compositions of objects uniformly.        Behavioral Patterns: These patterns are concerned with algorithms and the assignment of responsibilities between objects, focusing on communication between objects. Key examples include:          Observer: Defines a one-to-many dependency between objects so that when one object changes state, all its dependents are notified and updated automatically.      Strategy: Defines a family of algorithms, encapsulates each one, and makes them interchangeable, allowing the algorithm to vary independently from clients that use it.      Command: Encapsulates a request as an object, thereby allowing for parameterization of clients with queues, requests, and operations.      Benefits of Using Design Patterns  Reusability: Design patterns provide solutions to common problems that can be reused across different projects, saving time and effort.  Maintainability: By adhering to design patterns, the codebase remains clean, modular, and easier to maintain and extend.  Scalability: Patterns promote scalable designs that can grow with the application’s needs.  Communication: Design patterns create a shared vocabulary for developers, making it easier to communicate complex concepts and designs."
  },
  
  {
    "title": "Plugins Explained",
    "url": "/pages/dev/lumos/posts/plugins-explained/",
    "categories": "Blog",
    "tags": "Plugins",
    "date": "2024-12-20 00:00:00 +0530",
    





    
    "snippet": "OverviewPlugins is the way Glide provides standard techniques for extending the platform with applications, special UI functionality, and special Java “hooks”.ActivationPlugins can be activated by ...",
    "content": "OverviewPlugins is the way Glide provides standard techniques for extending the platform with applications, special UI functionality, and special Java “hooks”.ActivationPlugins can be activated by going into System Maintenance -&gt; Plugins, locating the plugin and clicking Activate.Sample PluginThe following example is the plugin.xml for home pages. It adds the home decoration to the top frame and registers a jelly tag and a AJAX processor:&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;&lt;plugin   id=\"com.glideapp.home\"   name=\"Home Plugin\"   version=\"0.0.1\"   provider-name=\"ServiceNow\"&gt;      &lt;extension point=\"com.glide.ui\" name=\"home_addons\"&gt;      \t&lt;decoration img=\"images/icons/home_16.gif\" href=\"home.do\" title=\"Home\" /&gt;      &lt;/extension&gt;      &lt;extension point=\"com.glide.ui.jelly\" name=\"generate_grid\"        class=\"com.glideapp.home.GenerateGridTag\"/&gt;      &lt;extension point=\"com.glide.ajax.processors\" name=\"HomeLayout\"        class=\"com.glideapp.home.HomeLayout\"/&gt; &lt;/plugin&gt;Here is another example, of the monitor plugin. This shows how you can make a plugin dependent on another plugin, using the  tag. When this plugin is enabled, it will also enable the com.glideapp.agent plugin if it isn't already registered:&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;&lt;plugin   id=\"com.glideapp.monitor\"   name=\"Monitor Plugin\"   version=\"0.0.1\"   provider-name=\"ServiceNow\"&gt;   &lt;requires&gt;\t&lt;import plugin=\"com.glideapp.agent\"/&gt;   &lt;/requires&gt; &lt;/plugin&gt;Files &amp; DirectoriesCommons  plugin.xml - This file is used to define the plugin.  dictionary/ - Dictionary (table / columns) definitions  ui.html/ - Static web content like html, js, images, etc…  ui.jforms/ - Glide jforms  ui.jtemplates/ - Glide jtemplates  unload/ - This data ONLY loaded when the plugin is first registered  update/ - Glide unloads, updates and fix jobs  apply_once/ - Glide unloads, updates and fix scripts that are supposed to only be applied onceOthers  sys.scripts/ - Additional scripts, these appear in Scripts Background  unload.demo/ - This data is ONLY loaded when the demo data is loadedExtension pointscom.glide.ajax.processors - Registers an AJAX processor  Example:          The example below will register one called HomeLayout.      Once a AJAX processor is registered, it can then be used through the glide AJAX API calls.      For example, xmlhttpRequest(\"HomeLayout\", \"sysparm_view=args\", callbackFunction);      &lt;extension point=\"com.glide.ajax.processors\" name=\"HomeLayout\"    class=\"com.glideapp.home.HomeLayout\"/&gt;com.glide.processors - Registers a glide java processor  Example:&lt;extension point=\"com.glide.processors\" name=\"Survey\"    class=\"com.glideapp.survey.SurveyProcessor\"/&gt;com.glide.ui.jelly - Registers a jelly tag.  Example:          The example below would create a new tag called &lt;g:generate_grid&gt;      &lt;extension point=\"com.glide.ui.jelly\" name=\"generate_grid\"    class=\"com.glideapp.home.GenerateGridTag\"/&gt;com.glide.ui - Alter the glide ui.  Example:          The example below will add a new decoration to the top right hand side of the web interface.      &lt;extension point=\"com.glide.ui\" name=\"home_addons\"&gt;  &lt;decoration img=\"images/icons/home_16.gif\" href=\"home.do\" title=\"Home\" /&gt;&lt;/extension&gt;com.glide.script.engine - Add a new script engine.  Example:          Script engines are run before and after every INSERT, UPDATE, or DELETE on the table that is specified in the table attribute.      The table may be a specific table or “*” to indicate all tables.      &lt;extension point=\"com.glide.script.engine\" name=\"script_watcher\" table=\"task\"    class=\"com.snc.stateengine.StateEngine\" /&gt;"
  },
  
  {
    "title": "How fix scripts run?",
    "url": "/pages/dev/lumos/posts/how-fix-scripts-run/",
    "categories": "Blog",
    "tags": "Blog, Fix Scripts, Fix, Script, Upgrades",
    "date": "2024-12-20 00:00:00 +0530",
    





    
    "snippet": "TypesThere are two types of fix scripts:  glidefix          glidefix may go into glide/update/fixes(Needs approval) or plugins folder        sys_script_fix.          sys_script_fix can go into plug...",
    "content": "TypesThere are two types of fix scripts:  glidefix          glidefix may go into glide/update/fixes(Needs approval) or plugins folder        sys_script_fix.          sys_script_fix can go into plugins folder      Tags      Before              Value      Location      Expected result                  before=true      glide/update/fixes      Fix scripts run after the system is paused and before the plugins upgrade has started              before=false or N/A      glide/update/fixes      Fix scripts run after plugins are upgraded and before the system.upgraded event is fired              before=true      plugin’s update folder      Fix scripts run after the unload folder is processed and before non-sys_db_object updates are loaded              before=false or N/A      plugin’s update folder      Fix scripts run after non-sys_db_object updates are loaded and before conditional content is loaded            Active          active was a field for sys_script_fix. We shouldn’t have to check in any fix script into our code base with active=false, hence remove the active field in Quebec. The default value is true. glidefix is always treated as active=true.            Run Once          run_once was a field for sys_script_fix and removed in Quebec. The default value is true for sys_script_fix and glidefix.      glidefix supports run_once tag (true or false). For glidefix with run_once=false, it will not run in the next upgrade unless the file content is changed.            Flush Cache          flush_cache is not honored. The field is removed from sys_script_fix record in Quebec      ExecutionDuring instance upgrades, glidefix and sys_script_fix are evaluated based on the content in the fix script XML file.While running sys_script_fix from Fix Script UI, they are evaluated based on the content in sys_script_fix table.            When Fix Scripts Run      Fix Script Type      Content Evaluated                  Instance Upgrade      glidefix or sys_script_fix      XML file              Application Installation/Upgrade and Plugin Activation/Repair      glidefix or sys_script_fix      XML file              “Run Fix Script” from UI      sys_script_fix      sys_script_fix table            Instance Upgrade          active=false sys_script_fix will not run during upgrade. glidfix is always active.      Fix scripts will run during zboot since they never run before.                  Run Once tag      XML file content change      Never Ran      Ran Before                  True or N/A (default)      True      Run      No run              True or N/A (default)      False      Run      No run              False      True      Run      Run              False      False      Run      No run            UI          run_once is not evaluated and it will always run.      Before Quebec, if active=false, the system will pop up warning message “That fix script is inactive.  To run the fix script, first activate it.” and prevent the script from running.      From Quebec onward, the active field is dropped from DB and UI, so there is no check for active anymore.            Plugin / Application – Installation / Upgrade / Repair          active=false sys_script_fix will not run during upgrade. glidfix is always active.                  Run once tag      Installation / Activation(First Time)      Upgrade / Repair(Fix script runs for first time)      Upgrade / Repair(Fix script already ran)                  True or N/A (default)      Run      Run      No Run              False      Run      Run      Run      ExampleHere is a fix script that logs the text “Hello world”:&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;  &lt;glidefix description=\"Hello world fix\"&gt;    &lt;script&gt;&lt;![CDATA[      gs.log(\"Hello world!\");    ]]&gt;&lt;/script&gt;  &lt;/glidefix&gt;Optional flagsWhile a system is being upgraded, unloads are turned off. However, sometimes a fix will need to write out an unload to the customer directory to fix something. When this behavior is necessary, the unloadable flag can be set on the glidefix:&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;glidefix description=\"KB Fix Advanced Property\" unloadable=\"true\"&gt;  .....&lt;/glidefix&gt;There is also a before flag that can be set. This flag tells the upgrade to process the glidefix BEFORE the upgrade, as opposed to after.&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;glidefix description=\"KB Fix Advanced Property\" before=\"true\"&gt;  .....&lt;/glidefix&gt;If the fix script is supposed to run on every plugin activation/upgrade, then use run_once. However, they cannot be in apply_once directory anymore.&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;glidefix description=\"KB Fix Advanced Property\" run_once=\"false\"&gt;  .....&lt;/glidefix&gt;Quebec ChangesStarting from the Quebec release, the active, run_once, and flush_cache have been dropped from both sys_script_fix table and Fix Script UI.Dropping active and run_once does not affect how the system executes existing fix scripts during the upgrade. The evaluation logic remains the same.The system evaluates the XML file in distribution and not from sys_script_fix table.  If there are existing legacy sys_script_fix XML files with run_once=false and active=false, the system still honors that.  Running scripts from UI does not evaluate run_once, so the behavior is the same as before.  Running fix scripts from UI does not check the active field anymore since the active field is dropped in Quebec.flush_cache is not evaluated any more both during the upgrade and when running fix scripts from UI from Quebec. Flush cache is not recommended since it may cause system malfunction. flush_cache has not been honored during upgrade since Fuji release.  Any customization made on the sys_script_fix through Fix Scripts UI will apply only when running fix scripts through “Run Fix Script” button. Instance upgrades, application installation/upgrade, or plugin activation/repair only use the fix script XML file inside the distribution.In Quebec an annotation is added at the top of the fix script UI form:  Any Customizations you make to the fix script will apply only when you manually run the script. Instance upgrades use the out of box fix script.For newly created sys_script_fix records from Quebec onward, there are no active, run_once, and flush_cache tags in the generated XML file; When modifying an existing legacy sys_script_fix record in Quebec, the active, run_once, and flush_cache tags are also dropped in the generated XML file."
  },
  
  {
    "title": "Script - Add Roles to Users",
    "url": "/pages/dev/lumos/posts/script-add-roles-to-users/",
    "categories": "Scripting",
    "tags": "Scripting, Script, Add Roles, ServiceNow",
    "date": "2024-12-19 00:00:00 +0530",
    





    
    "snippet": "Table of Contents  Overview  Code Example  Parameters  Return Value  Usage Example  NotesOverviewThis script assigns roles to users within a ServiceNow instance. It uses the sys_user_has_role table...",
    "content": "Table of Contents  Overview  Code Example  Parameters  Return Value  Usage Example  NotesOverviewThis script assigns roles to users within a ServiceNow instance. It uses the sys_user_has_role table to link users to roles and ensures no workflow is triggered during the insertion process.Code Example/** * Adds roles to specified users in the ServiceNow instance. *  * @param {Array&lt;string&gt;} usersForRoles - List of user sys_ids to assign roles to. * @param {Array&lt;string&gt;} roles - List of role sys_ids to assign to the users. * @param {string} [groupId] - (Optional) The group ID to associate the role assignment with. * @returns {void} */function addRolesToUser(usersForRoles, roles, groupId) {  var gr = new GlideRecord(\"sys_user_has_role\");  for (var i = 0; i &lt; usersForRoles.length; i++) {    for (var j = 0; j &lt; roles.length; j++) {      gr.initialize();      gr.user = usersForRoles[i];      gr.role = roles[j];      gr.inherited = false;      gr.granted_by = groupId || \"\";      gr.setWorkflow(false);      gr.insert();    }  }}Parameters            Parameter      Type      Description                  usersForRoles      Array&lt;string&gt;      List of user sys_ids to assign roles to.              roles      Array&lt;string&gt;      List of role sys_ids to assign to the users.              groupId      string      (Optional) The group ID to associate the role assignment with (default: “”).      Return ValueThis script does not return a value. It performs insert operations on the sys_user_has_role table to associate roles with users.Usage Example// Example usage of addRolesToUservar users = ['user_sys_id_1', 'user_sys_id_2'];var roles = ['role_sys_id_1', 'role_sys_id_2'];var groupId = 'group_sys_id_1';// Assign roles to usersaddRolesToUser(users, roles, groupId);The script will assign the specified roles to each user in the users array. If a groupId is provided, it will associate the role assignment with that group.Notes  Ensure that the usersForRoles and roles arrays contain valid sys_id values from your ServiceNow instance.  The groupId parameter is optional and can be omitted if no group association is required.  Use this script responsibly, as improper role assignments may impact user permissions."
  },
  
  {
    "title": "Setup Email Inbound & Outbound Configuration in Local Instane",
    "url": "/pages/dev/lumos/posts/setup-email-local-instance/",
    "categories": "Miscellaneous",
    "tags": "Miscellaneous, Email, Setup, Local Instance, Inbound, Outbound",
    "date": "2024-12-19 00:00:00 +0530",
    





    
    "snippet": "Email Configuration  Inbound Emails: Allow your instance to process incoming emails and trigger specific workflows like creating incidents, responding to queries, or executing automated tasks.  Out...",
    "content": "Email Configuration  Inbound Emails: Allow your instance to process incoming emails and trigger specific workflows like creating incidents, responding to queries, or executing automated tasks.  Outbound Emails: Enable your instance to send notifications, alerts, or other email communications to external users.Below is one Example on how to setup gmail for inbound and outbound emails in the instancePrerequisites  An instance with admin access.  Credentials for the email account you wish to use.Outbound Email Configuration  Navigate to System Mailboxes &gt; Administration &gt; Email Accounts  Create a new Email Account with the below details:          Name: Gmail Outbound      Type: SMTP      Authentication: Password      Server: smtp.gmail.com      Active: Checked      Username: Provide email      Password: Provide Gmail Password      Connection Security: SSL/TSL      Port: 465        Test the connection to ensure it is working.Inbound Email Configuration  Navigate to System Mailboxes &gt; Administration &gt; Email Accounts  Create a new Email Account with the below details:          Name: Gmail Inbound      Type: POP      Authentication: Password      Server: pop.gmail.com      Active: Checked      Username: Provide email      Password: Provide Gmail Password      Connection Security: SSL/TSL      Port: 993        Test the connection to ensure it is working.Troubleshooting  Check network connectivity to the email servers.  Verify the credentials and permissions of the email account."
  },
  
  {
    "title": "Logging and Monitoring",
    "url": "/pages/dev/lumos/posts/logging-monitoring/",
    "categories": "Coding Standards",
    "tags": "Coding Standards, Code, Standards, Logging, Monitoring",
    "date": "2024-12-19 00:00:00 +0530",
    





    
    "snippet": "ScenarioLogging and monitoring is an integral part which helps in debugging performance and quality issues of code overall. This comes particularly handy while we are troubleshooting in production....",
    "content": "ScenarioLogging and monitoring is an integral part which helps in debugging performance and quality issues of code overall. This comes particularly handy while we are troubleshooting in production. Proactive monitoring enables us to identify and resolve issues minimising the impact on the customer.The try class of statements should have the following form:try {    statements } catch (variable) {    statements } Make sure to put your code always inside the try block to catch the exceptions and error.If we are implementing generic apis it is best to handle the exceptions in the calling methods. For Eg: Slack and MS teams use collab proxy apis. Exceptions thrown at collab proxy api must be handled differently for Slack and MS teams. Should also assess this on a case to case basis based on the use cases applicable.Scenario 1:  Slack API is down and the user commands are failing. With the proper invocation of monitoring API as shown below, an alert is created and the on-call team member is notified based on which we can communicate to the customer well in advance.Scenario 2:  Client secret for any of the integrations using OAuth expires. This would trigger alerts and the developer on-call can act on it and resolve it with minimal customer impact.Scenario 3:  If we are throwing errors to handle expected user validations such as to indicate the rate limits. Monitoring API should not be invoked as this will cause noise and create unwanted alerts.Monitoring APIUse Monitoring API if you want to generate Alerts for the exceptions/errors.Try to consolidate the alerts:fMonitoringApi.logMessage({     feature_area: sn_air_monitoring.AirMonitoringConstants.FEATURE_AREA.MSTEAMS_MONITORING,     object_name: objectName,     function_name: funcName,     function_input_parameter: funcParams,     log_message: message,     log_level: logLevel }); Add logging statements at every logical point in the code. Use gs.info / gs.debug / gs.warn depending on the logging level."
  },
  
  {
    "title": "Script - Group Generator",
    "url": "/pages/dev/lumos/posts/script-create-groups/",
    "categories": "Scripting",
    "tags": "Scripting, Script, Group, Group Creation, Create Group, Generate Group, Group Generation",
    "date": "2024-12-18 00:00:00 +0530",
    





    
    "snippet": "ScriptTable of Contents  Overview  Code Example  Parameters  Return Value  Usage Example  NotesOverviewThe Group Generator Script provides a straightforward way to generate user groups in the Servi...",
    "content": "ScriptTable of Contents  Overview  Code Example  Parameters  Return Value  Usage Example  NotesOverviewThe Group Generator Script provides a straightforward way to generate user groups in the ServiceNow sys_user_group table. It allows you to:  Specify the starting index for the group names.  Define the number of groups to create.  Set a prefix for the group names.Each generated group is inserted into the sys_user_group table, and the function returns an array of the inserted group record IDs. This is useful for bulk group creation tasks.Code Example/** * Generates a specified number of user groups with names following a prefix pattern * and inserts them into the `sys_user_group` table. * * @param {number} startIndex - The starting index for group names (default: 0). * @param {number} groupCount - The total number of groups to generate (default: 50). * @param {string} namePrefix - The prefix to be used for each group's name (default: 'GeneratedGroup_'). * @returns {string[]} An array of inserted group record IDs. */function generateGroups(startIndex, groupCount, namePrefix) {  // Default to 0 if startIndex is not provided  if (gs.nil(startIndex)) {    startIndex = 0;  }  // Default to 50 if groupCount is not provided  if (gs.nil(groupCount)) {    groupCount = 50;  }  // Default to 'GeneratedGroup_' if namePrefix is not provided  if (gs.nil(namePrefix)) {    namePrefix = 'GeneratedGroup_';  }  var groupIds = [];  var groupRecord = new GlideRecord('sys_user_group');  groupRecord.initialize();  // Loop through and create the specified number of groups  for (var index = startIndex; index &lt; (startIndex + groupCount); index++) {    var groupName = namePrefix + index;    groupRecord.name = groupName;    groupRecord.email = groupName.toLowerCase() + '@example.com';    groupRecord.setWorkflow(false);    groupIds.push(groupRecord.insert());  }  return groupIds;}Parameters            Parameter      Type      Description                  startIndex      number      The starting index for group names (default: 0).              groupCount      number      The total number of groups to generate (default: 50). Determines how many records will be inserted into the table.              namePrefix      string      A string used as the prefix for each group’s name (default: ‘GeneratedGroup_’). Each group will be named sequentially, e.g., \"GeneratedGroup_0\", \"GeneratedGroup_1\", etc.      Return Value  Returns (string[]):An array containing the record IDs of each created group in the sys_user_group table.Usage ExampleTo use the generateGroups function, simply call it with the desired parameters. Here’s an example:// Example usage of generateGroups function to create 100 groups starting from index 0var groupIds = generateGroups(0, 100, 'OncallGroup_');// Log the group IDs createdgs.info('Generated Group IDs: ' + groupIds.join(', '));In this example:  The script will create 100 groups named OncallGroup_0, OncallGroup_1, …, OncallGroup_99.  Each group will have an email address like oncallgroup_0@example.com, oncallgroup_1@example.com, etc.  The groupIds array will contain the record IDs of the created groups.Notes  Workflow Disabled: setWorkflow(false) disables workflow triggering for each insert operation, ensuring faster inserts without extra processing.  Customizable Prefix: You can adjust the namePrefix parameter to suit your needs. For example, you might use a department name or role designation in the prefix.  Defaults: If no parameters are provided, the script defaults to creating 50 groups starting at index 0 with the prefix \"GeneratedGroup_\"."
  },
  
  {
    "title": "Script - User Generator",
    "url": "/pages/dev/lumos/posts/script-create-users/",
    "categories": "Scripting",
    "tags": "Scripting, Script, User, User Creation, Create User, Generate User, User Generation",
    "date": "2024-12-17 00:00:00 +0530",
    





    
    "snippet": "Table of Contents  Overview  Code Example  Parameters  Return Value  Usage Example  NotesOverviewThe User Creation Script provides an efficient way to generate multiple user records in the ServiceN...",
    "content": "Table of Contents  Overview  Code Example  Parameters  Return Value  Usage Example  NotesOverviewThe User Creation Script provides an efficient way to generate multiple user records in the ServiceNow sys_user table. You can specify:  The starting index for the user names.  The number of users to create.  The prefix for the first name of the users.  The password for each user.Each generated user is inserted into the sys_user table, and the function returns an array of the inserted user record IDs.Code Example/** * Generates a list of user IDs by creating multiple users in the `sys_user` table. * The user data includes a user name, password, first and last names, email, and phone number. *  * @param {number} startIndex - The index to start generating user names from. * @param {number} userCount - The number of users to create. * @param {string} namePrefix - The prefix for user names and first names. * @param {string} password - The password to assign to each user. * @returns {Array} An array of created user IDs. */function generateUsers(startIndex, userCount, namePrefix, password) {  var userIds = [];  var userGr = new GlideRecord(\"sys_user\");  userGr.initialize();    // Loop through the number of users to create  for (var index = startIndex; index &lt; (startIndex + userCount); index++) {    var userName = namePrefix + \"lname\" + index;        // Assign user details    userGr.user_name = userName;    userGr.user_password.setDisplayValue(password);    userGr.first_name = namePrefix + index;    userGr.last_name = \"lname\";    userGr.email = userName.toLowerCase() + \"@example.com\";        // Generate random phone number    userGr.phone = \"+1\" + (Math.floor(Math.random() * (4089999999 - 4010000000) + 4010000000));    userGr.setWorkflow(false);        // Insert user and add the ID to the list    userIds.push(userGr.insert());  }    return userIds;}Parameters            Parameter      Type      Description                  startIndex      number      The starting index for creating users (default: 0).              userCount      number      The total number of users to create (default: 50). Determines how many records will be inserted into the table.              namePrefix      string      A string used as the prefix for each user’s first name (default: ‘GeneratedUser’).              password      string      The password assigned to the generated users (default: ‘Welcome1$’).      Return Value  Returns (string[]):An array containing the record IDs of each created user in the sys_user table.Usage ExampleTo use the generateUsers function, call it with the required parameters. The function creates multiple users starting from the given index and assigns them names with the specified prefix.Here is an example of how you can use the function:// Example usage of generateUsers function to create 1000 users starting from index 1var userIds = generateUsers(1, 1000, 'GeneratedUser', 'Welcome1$');// Log the user IDs createdgs.info('Generated User IDs: ' + userIds.join(', '));In this example:  The generateUsers function is called with the starting index 1, the user count 1000, the name prefix ‘GeneratedUser’, and the password ‘Welcome1$’.  The function will create 1000 users with names like GeneratedUser1, GeneratedUser2, …, and assign the password ‘Welcome1$’ to each user.The function will return an array of the IDs of all the created users.Notes  Workflow Disabled: The script uses setWorkflow(false) to avoid triggering any workflows during user creation. This makes the insert operation faster.  Customizable Name Prefix: The namePrefix parameter allows you to specify a prefix for user first names (e.g., \"GeneratedUser\").  Email Generation: The users will be assigned email addresses in the format of username@example.com.  Phone Generation: A random phone number will be generated for each user in the format +1XXXXXXXXXX."
  },
  
  {
    "title": "Script - Template",
    "url": "/pages/dev/lumos/posts/script-new-template/",
    "categories": "Scripting",
    "tags": "Scripting, Script, Template, New Script, Create Script",
    "date": "2024-12-16 00:00:00 +0530",
    





    
    "snippet": "To see an example for motivation, visit Create GroupTable of Contents  Overview  Code Example  Parameters  Return Value  Usage Example  NotesOverviewProvide an overview of what your scripts is offe...",
    "content": "To see an example for motivation, visit Create GroupTable of Contents  Overview  Code Example  Parameters  Return Value  Usage Example  NotesOverviewProvide an overview of what your scripts is offering and make sure you provide the variable names and thei usage.Code ExampleProvide a code example of the script(this is where you keep your script). make sure it has proper JSDoc and eslint config with appropriate variable names and comments where ever necessary. Do not include usage example here. There is a seprate section for it.ParametersProvide your parameters in the table format. Do remove this line when submitting the changes for review.Refer:            Parameter      Type      Description                  startIndex      number      The starting index for creating users (default: 0).      Return ValueProvid a breif info of what your function/script is returning.Usage ExampleProvide the usage example code and explanation for your script. You can refer to the existing scripts for motivation.NotesAny special notes if you want ot add or else you can remove this section and from table of contents as well."
  },
  
  {
    "title": "Text and Typography",
    "url": "/pages/dev/lumos/posts/text-and-typography/",
    "categories": "Guides",
    "tags": "Guides, Typography, Text, Layout, Math, Equations, Diagrams, FlowCharts, Pictures, Videos, Images, HTML, Markup, Tables, Footnote, Heading",
    "date": "2024-12-03 00:00:00 +0530",
    





    
    "snippet": "HeadingsH1 — headingH2 — headingH3 — headingH4 — headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risu...",
    "content": "HeadingsH1 — headingH2 — headingH3 — headingH4 — headingParagraphQuisque egestas convallis ipsum, ut sollicitudin risus tincidunt a. Maecenas interdum malesuada egestas. Duis consectetur porta risus, sit amet vulputate urna facilisis ac. Phasellus semper dui non purus ultrices sodales. Aliquam ante lorem, ornare a feugiat ac, finibus nec mauris. Vivamus ut tristique nisi. Sed vel leo vulputate, efficitur risus non, posuere mi. Nullam tincidunt bibendum rutrum. Proin commodo ornare sapien. Vivamus interdum diam sed sapien blandit, sit amet aliquam risus mattis. Nullam arcu turpis, mollis quis laoreet at, placerat id nibh. Suspendisse venenatis eros eros.ListsOrdered list  Firstly  Secondly  ThirdlyUnordered list  Chapter          Section                  Paragraph                    ToDo list  Job          Step 1      Step 2      Step 3      Description list  Sun  the star around which the earth orbits  Moon  the natural satellite of the earth, visible by reflected light from the sunBlock Quote  This line shows the block quote.Prompts  An example showing the tip type prompt.  An example showing the info type prompt.  An example showing the warning type prompt.  An example showing the danger type prompt.Tables            Company      Contact      Country                  Alfreds Futterkiste      Maria Anders      Germany              Island Trading      Helen Bennett      UK              Magazzini Alimentari Riuniti      Giovanni Rovelli      Italy      Linkshttp://127.0.0.1:4000FootnoteClick the hook will locate the footnote1, and here is another footnote2.Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blocksCommonThis is a common code snippet, without syntax highlight and line number.Specific Languageif [ $? -ne 0 ]; then  echo \"The command was not successful.\";  #do the needful / exitfi;Specific filename@import  \"colors/light-typography\",  \"colors/dark-typography\";MathematicsThe mathematics powered by MathJax:\\[\\begin{equation}  \\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}  \\label{eq:series}\\end{equation}\\]We can reference the equation as \\eqref{eq:series}.When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Mermaid SVG gantt  title  Adding GANTT diagram functionality to mermaid  apple :a, 2017-07-20, 1w  banana :crit, b, 2017-07-23, 1d  cherry :active, c, after b a, 1dImagesDefault (with caption)Full screen width and center alignmentLeft alignedFloat to leftPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Float to rightMake some changesPraesent maximus aliquam sapien. Sed vel neque in dolor pulvinar auctor. Maecenas pharetra, sem sit amet interdum posuere, tellus lacus eleifend magna, ac lobortis felis ipsum id sapien. Proin ornare rutrum metus, ac convallis diam volutpat sit amet. Phasellus volutpat, elit sit amet tincidunt mollis, felis mi scelerisque mauris, ut facilisis leo magna accumsan sapien. In rutrum vehicula nisl eget tempor. Nullam maximus ullamcorper libero non maximus. Integer ultricies velit id convallis varius. Praesent eu nisl eu urna finibus ultrices id nec ex. Mauris ac mattis quam. Fusce aliquam est nec sapien bibendum, vitae malesuada ligula condimentum.Dark/Light mode &amp; ShadowThe image below will toggle dark/light mode based on theme preference, notice it has shadows.Reverse Footnote            The footnote source &#8617;&#xfe0e;              The 2nd footnote source &#8617;&#xfe0e;      "
  },
  
  {
    "title": "Writing a New Post",
    "url": "/pages/dev/lumos/posts/write-a-new-post/",
    "categories": "Guides",
    "tags": "Guides, Writing, Post, Front Matter, Categories, Tags, TOC",
    "date": "2024-12-02 00:00:00 +0530",
    





    
    "snippet": "This tutorial will guide you on how to write a post in the Lumos template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and...",
    "content": "This tutorial will guide you on how to write a post in the Lumos template, and it’s worth reading even if you’ve used Jekyll before, as many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.$ bundle exec jekyll post \"My New Post\" --timestamp-format \"%Y-%m-%d %H:%M:%S %z\"This will create a new markdown file under _posts and you can move it to respective folder.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEauthor: AUTHORdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG]---  The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateTo accurately record the release date of a post, you should not only set up the timezone in _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [Bee]---Author InformationAdd the author information in _data/authors.yml if not present already and make sure the author_id is in snake case.&lt;author_id&gt;:  name: &lt;full name&gt;  twitter: &lt;twitter_of_author&gt;  url: &lt;homepage_of_author&gt;And then use author to specify a single entry or authors to specify multiple entries:---author: &lt;author_id&gt;                     # for single entry# orauthors: [&lt;author1_id&gt;, &lt;author2_id&gt;]   # for multiple entries---Having said that, the key author can also identify multiple entries.Post DescriptionBy default, the first words of the post are used to display on the home page for a list of posts, in the Further Reading section, and in the XML of the RSS feed. If you don’t want to display the auto-generated description for the post, you can customize it using the description field in the Front Matter as follows:---description: Short summary of the post.---Additionally, the description text will also be displayed under the post title on the post’s page.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off for a your post, add the following to the post’s Front Matter:---toc: false---MediaWe refer to images, audio and video as media resources in Lumos.ImagesCaptionAdd italics to the next line of an image, then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeTo prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image.![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }  For an SVG, you have to at least specify its width, otherwise it won’t be rendered.Starting from Lumos v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right.  Once the position is specified, the image caption should not be added.      Normal position    Image will be left aligned in below sample:    ![Desktop View](/assets/img/sample/mockup.png){: .normal }            Float to the left    ![Desktop View](/assets/img/sample/mockup.png){: .left }            Float to the right    ![Desktop View](/assets/img/sample/mockup.png){: .right }      Dark/Light modeYou can make images follow theme preferences in dark/light mode. This requires you to prepare two images, one for dark mode and one for light mode, and then assign them a specific class (dark or light):![Light mode only](/path/to/light-mode.png){: .light }![Dark mode only](/path/to/dark-mode.png){: .dark }ShadowThe screenshots of the program window can be considered to show the shadow effect:![Desktop View](/assets/img/sample/mockup.png){: .shadow }Preview ImageIf you want to add an image at the top of the post, please provide an image with a resolution of 1200 x 630. Please note that if the image aspect ratio does not meet 1.91 : 1, the image will be scaled and cropped.Knowing these prerequisites, you can start setting the image’s attribute:---image:  path: /path/to/image  alt: image alternative text---Note that the media_subpath can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.For simple use, you can also just use image to define the path.---image: /path/to/image---LQIPFor preview images:---image:  lqip: /path/to/lqip-file # or base64 URI---  You can observe LQIP in the preview image of post \"Text and Typography\".For normal images:![Image description](/path/to/image){: lqip=\"/path/to/lqip-file\" }Video FilesIf you want to embed a video file directly, use the following syntax:{% include embed/video.html src='{URL}' %}Where URL is a URL to a video file e.g. /path/to/sample/video.mp4.You can also specify additional attributes for the embedded video file. Here is a full list of attributes allowed.  poster='/path/to/poster.png' — poster image for a video that is shown while video is downloading  title='Text' — title for a video that appears below the video and looks same as for images  autoplay=true — video automatically begins to play back as soon as it can  loop=true — automatically seek back to the start upon reaching the end of the video  muted=true — audio will be initially silenced  types — specify the extensions of additional video formats separated by |. Ensure these files exist in the same directory as your primary video file.Consider an example using all of the above:{%  include embed/video.html  src='/path/to/video.mp4'  types='ogg|mov'  poster='poster.png'  title='Demo video'  autoplay=true  loop=true  muted=true%}AudiosIf you want to embed an audio file directly, use the following syntax:{% include embed/audio.html src='{URL}' %}Where URL is a URL to an audio file e.g. /path/to/audio.mp3.You can also specify additional attributes for the embedded audio file. Here is a full list of attributes allowed.  title='Text' — title for an audio that appears below the audio and looks same as for images  types — specify the extensions of additional audio formats separated by |. Ensure these files exist in the same directory as your primary audio file.Consider an example using all of the above:{%  include embed/audio.html  src='/path/to/audio.mp3'  types='ogg|wav|aac'  title='Demo audio'%}Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Highlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value```  The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %}  This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.MathematicsWe use MathJax to generate mathematics. For website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---After enabling the mathematical feature, you can add math equations with the following syntax:  Block math should be added with $$ math $$ with mandatory blank lines before and after $$          Inserting equation numbering should be added with $$\\begin{equation} math \\end{equation}$$      Referencing equation numbering should be done with \\label{eq:label_name} in the equation block and \\eqref{eq:label_name} inline with text (see example below)        Inline math (in lines) should be added with $$ math $$ without any blank line before or after $$  Inline math (in lists) should be added with \\$$ math $$&lt;!-- Block math, keep all blank lines --&gt;$$LaTeX_math_expression$$&lt;!-- Equation numbering, keep all blank lines  --&gt;$$\\begin{equation}  LaTeX_math_expression  \\label{eq:label_name}\\end{equation}$$Can be referenced as \\eqref{eq:label_name}.&lt;!-- Inline math in lines, NO blank lines --&gt;\"Lorem ipsum dolor sit amet, $$ LaTeX_math_expression $$ consectetur adipiscing elit.\"&lt;!-- Inline math in lists, escape the first `$` --&gt;1. \\$$ LaTeX_math_expression $$2. \\$$ LaTeX_math_expression $$3. \\$$ LaTeX_math_expression $$  Starting with v7.0.0, configuration options for MathJax have been moved to file assets/js/data/mathjax.js, and you can change the options as needed, such as adding extensions.If you are building the site via lumos-starter, copy that file from the gem installation directory (check with command bundle info --path jekyll-theme-lumos) to the same directory in your repository.MermaidMermaid is a great diagram generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts."
  },
  
  {
    "title": "Getting Started",
    "url": "/pages/dev/lumos/posts/getting-started/",
    "categories": "Guides",
    "tags": "Guides, Getting Started, Setup, Build, Deploy, Server, Jekyll",
    "date": "2024-12-01 00:00:00 +0530",
    





    
    "snippet": "Setting up the EnvironmentSteps:  Follow the Jekyll installation guide to install Jekyll and ensure Git is installed.  Clone the Lumos repository to your local machine.UsageStart the Jekyll ServerT...",
    "content": "Setting up the EnvironmentSteps:  Follow the Jekyll installation guide to install Jekyll and ensure Git is installed.  Clone the Lumos repository to your local machine.UsageStart the Jekyll ServerTo run the site locally, use the following command:# Initializes the git submodules and pulls the required assets to `assets/lib` folder$ git submodule update --init# Install the necessary node dependencies$ npm i# Build the project to generate the necessary js sourcemaps$ npm run build# Run the site in the local system$ bundle exec jekyll sAfter a few seconds, the local server will be available at http://127.0.0.1:4000.Build and DeploymentSince this is site is built on a self-hosted server, you will need to build the site on your local machine and then upload the site files to the docs folder.Build:This project has a dependency on the Lumos static assets which should be added as a git submodule to this project.Navigate to the root of the source project, and build your site with the following command[s]:# Initializes the git submodules and pulls the required assets to `assets/lib` folder$ git submodule update --init# Install the necessary node dependencies$ npm i# Build the project to generate the necessary js sourcemaps$ npm run build# Generate the changes to the docs folder$ JEKYLL_ENV=production bundle exec jekyll bAlternatively, you can run the below command in your terminal which will generate the site in docs folder ready to commit.$ npm run build$ npm run publishUnless you specified the output path, the generated site files will be placed in the docs folder of the project’s root directory."
  }
  
]

